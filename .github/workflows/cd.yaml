name: build-image

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    tags:
      - "*"
  workflow_run:
    workflows: ["check-code"]
    types:
      - completed
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ehco1996/ehco

jobs:
  prepare-matrix:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo '{"platform": ["amd64", "arm64"]}' > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  build-bin:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
        id: go

      # Updated cache step
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: build
        run: |
          rm -rf /tmp/ehco
          mkdir -p /tmp/ehco
          make build
          mv ./dist/ehco /tmp/ehco/ehco-amd64
          make build-arm
          mv ./dist/ehco /tmp/ehco/ehco-arm64
          cp ./build/Dockerfile /tmp/ehco/Dockerfile
          # debug
          ls -la /tmp/ehco

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: /tmp/ehco
          if-no-files-found: error
          retention-days: 1

  build-image:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs:
      - prepare-matrix
      - build-bin
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: /tmp/ehco

      - name: Rename the binary
        run: |
          # debug
          ls -la /tmp/ehco
          cp /tmp/ehco/ehco-${{ matrix.platform }} /tmp/ehco/ehco
          # debug
          ls -la /tmp/ehco

      - name: Set up qemu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build multi-platform image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: /tmp/ehco
          file: /tmp/ehco/Dockerfile
          platforms: linux/${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs:
      - prepare-matrix
      - build-image
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest
            type=ref,event=tag

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # need add more platform when change the matrix
      - name: Download digests for amd64
        uses: actions/download-artifact@v4
        with:
          name: digests-amd64
          path: /tmp/digests/amd64

      - name: Download digests for arm64
        uses: actions/download-artifact@v4
        with:
          name: digests-arm64
          path: /tmp/digests/arm64

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          echo "Creating manifest list..."
          # debug
          ls -la /tmp/digests
          ls -la /tmp/digests/amd64 || echo "amd64 digest not found"
          ls -la /tmp/digests/arm64 || echo "arm64 digest not found"

          AMD64_DIGEST=$(ls amd64/ 2>/dev/null || echo "")
          ARM64_DIGEST=$(ls arm64/ 2>/dev/null || echo "")

          echo "AMD64_DIGEST: $AMD64_DIGEST"
          echo "ARM64_DIGEST: $ARM64_DIGEST"

          if [ -z "$AMD64_DIGEST" ] || [ -z "$ARM64_DIGEST" ]; then
            echo "Error: One or more digests are missing"
            exit 1
          fi

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:latest \
            ${{ env.REGISTRY_IMAGE }}@sha256:$AMD64_DIGEST \
            ${{ env.REGISTRY_IMAGE }}@sha256:$ARM64_DIGEST

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version || 'latest' }}
